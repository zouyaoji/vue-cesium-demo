{"version":3,"file":"CorridorGeometryLibrary-33b2ba75.js","sources":["../../../../Source/Core/CorridorGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport CornerType from \"./CornerType.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport Quaternion from \"./Quaternion.js\";\n\n/**\n * @private\n */\nconst CorridorGeometryLibrary = {};\n\nconst scratch1 = new Cartesian3();\nconst scratch2 = new Cartesian3();\nconst scratch3 = new Cartesian3();\nconst scratch4 = new Cartesian3();\n\nconst scaleArray2 = [new Cartesian3(), new Cartesian3()];\n\nconst cartesian1 = new Cartesian3();\nconst cartesian2 = new Cartesian3();\nconst cartesian3 = new Cartesian3();\nconst cartesian4 = new Cartesian3();\nconst cartesian5 = new Cartesian3();\nconst cartesian6 = new Cartesian3();\nconst cartesian7 = new Cartesian3();\nconst cartesian8 = new Cartesian3();\nconst cartesian9 = new Cartesian3();\nconst cartesian10 = new Cartesian3();\n\nconst quaterion = new Quaternion();\nconst rotMatrix = new Matrix3();\nfunction computeRoundCorner(\n  cornerPoint,\n  startPoint,\n  endPoint,\n  cornerType,\n  leftIsOutside\n) {\n  const angle = Cartesian3.angleBetween(\n    Cartesian3.subtract(startPoint, cornerPoint, scratch1),\n    Cartesian3.subtract(endPoint, cornerPoint, scratch2)\n  );\n  const granularity =\n    cornerType === CornerType.BEVELED\n      ? 1\n      : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\n\n  const size = granularity * 3;\n  const array = new Array(size);\n\n  array[size - 3] = endPoint.x;\n  array[size - 2] = endPoint.y;\n  array[size - 1] = endPoint.z;\n\n  let m;\n  if (leftIsOutside) {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(\n        Cartesian3.negate(cornerPoint, scratch1),\n        angle / granularity,\n        quaterion\n      ),\n      rotMatrix\n    );\n  } else {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion),\n      rotMatrix\n    );\n  }\n\n  let index = 0;\n  startPoint = Cartesian3.clone(startPoint, scratch1);\n  for (let i = 0; i < granularity; i++) {\n    startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n    array[index++] = startPoint.x;\n    array[index++] = startPoint.y;\n    array[index++] = startPoint.z;\n  }\n\n  return array;\n}\n\nfunction addEndCaps(calculatedPositions) {\n  let cornerPoint = cartesian1;\n  let startPoint = cartesian2;\n  let endPoint = cartesian3;\n\n  let leftEdge = calculatedPositions[1];\n  startPoint = Cartesian3.fromArray(\n    calculatedPositions[1],\n    leftEdge.length - 3,\n    startPoint\n  );\n  endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\n  cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n  const firstEndCap = computeRoundCorner(\n    cornerPoint,\n    startPoint,\n    endPoint,\n    CornerType.ROUNDED,\n    false\n  );\n\n  const length = calculatedPositions.length - 1;\n  const rightEdge = calculatedPositions[length - 1];\n  leftEdge = calculatedPositions[length];\n  startPoint = Cartesian3.fromArray(\n    rightEdge,\n    rightEdge.length - 3,\n    startPoint\n  );\n  endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\n  cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n  const lastEndCap = computeRoundCorner(\n    cornerPoint,\n    startPoint,\n    endPoint,\n    CornerType.ROUNDED,\n    false\n  );\n\n  return [firstEndCap, lastEndCap];\n}\n\nfunction computeMiteredCorner(\n  position,\n  leftCornerDirection,\n  lastPoint,\n  leftIsOutside\n) {\n  let cornerPoint = scratch1;\n  if (leftIsOutside) {\n    cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n  } else {\n    leftCornerDirection = Cartesian3.negate(\n      leftCornerDirection,\n      leftCornerDirection\n    );\n    cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n  }\n  return [\n    cornerPoint.x,\n    cornerPoint.y,\n    cornerPoint.z,\n    lastPoint.x,\n    lastPoint.y,\n    lastPoint.z,\n  ];\n}\n\nfunction addShiftedPositions(positions, left, scalar, calculatedPositions) {\n  const rightPositions = new Array(positions.length);\n  const leftPositions = new Array(positions.length);\n  const scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\n  const scaledRight = Cartesian3.negate(scaledLeft, scratch2);\n  let rightIndex = 0;\n  let leftIndex = positions.length - 1;\n\n  for (let i = 0; i < positions.length; i += 3) {\n    const pos = Cartesian3.fromArray(positions, i, scratch3);\n    const rightPos = Cartesian3.add(pos, scaledRight, scratch4);\n    rightPositions[rightIndex++] = rightPos.x;\n    rightPositions[rightIndex++] = rightPos.y;\n    rightPositions[rightIndex++] = rightPos.z;\n\n    const leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\n    leftPositions[leftIndex--] = leftPos.z;\n    leftPositions[leftIndex--] = leftPos.y;\n    leftPositions[leftIndex--] = leftPos.x;\n  }\n  calculatedPositions.push(rightPositions, leftPositions);\n\n  return calculatedPositions;\n}\n\n/**\n * @private\n */\nCorridorGeometryLibrary.addAttribute = function (\n  attribute,\n  value,\n  front,\n  back\n) {\n  const x = value.x;\n  const y = value.y;\n  const z = value.z;\n  if (defined(front)) {\n    attribute[front] = x;\n    attribute[front + 1] = y;\n    attribute[front + 2] = z;\n  }\n  if (defined(back)) {\n    attribute[back] = z;\n    attribute[back - 1] = y;\n    attribute[back - 2] = x;\n  }\n};\n\nconst scratchForwardProjection = new Cartesian3();\nconst scratchBackwardProjection = new Cartesian3();\n\n/**\n * @private\n */\nCorridorGeometryLibrary.computePositions = function (params) {\n  const granularity = params.granularity;\n  const positions = params.positions;\n  const ellipsoid = params.ellipsoid;\n  const width = params.width / 2;\n  const cornerType = params.cornerType;\n  const saveAttributes = params.saveAttributes;\n  let normal = cartesian1;\n  let forward = cartesian2;\n  let backward = cartesian3;\n  let left = cartesian4;\n  let cornerDirection = cartesian5;\n  let startPoint = cartesian6;\n  let previousPos = cartesian7;\n  let rightPos = cartesian8;\n  let leftPos = cartesian9;\n  let center = cartesian10;\n  let calculatedPositions = [];\n  const calculatedLefts = saveAttributes ? [] : undefined;\n  const calculatedNormals = saveAttributes ? [] : undefined;\n  let position = positions[0]; //add first point\n  let nextPosition = positions[1];\n\n  forward = Cartesian3.normalize(\n    Cartesian3.subtract(nextPosition, position, forward),\n    forward\n  );\n  normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n  left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n  if (saveAttributes) {\n    calculatedLefts.push(left.x, left.y, left.z);\n    calculatedNormals.push(normal.x, normal.y, normal.z);\n  }\n  previousPos = Cartesian3.clone(position, previousPos);\n  position = nextPosition;\n  backward = Cartesian3.negate(forward, backward);\n\n  let subdividedPositions;\n  const corners = [];\n  let i;\n  const length = positions.length;\n  for (i = 1; i < length - 1; i++) {\n    // add middle points and corners\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n    nextPosition = positions[i + 1];\n    forward = Cartesian3.normalize(\n      Cartesian3.subtract(nextPosition, position, forward),\n      forward\n    );\n    cornerDirection = Cartesian3.normalize(\n      Cartesian3.add(forward, backward, cornerDirection),\n      cornerDirection\n    );\n\n    const forwardProjection = Cartesian3.multiplyByScalar(\n      normal,\n      Cartesian3.dot(forward, normal),\n      scratchForwardProjection\n    );\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n    Cartesian3.normalize(forwardProjection, forwardProjection);\n\n    const backwardProjection = Cartesian3.multiplyByScalar(\n      normal,\n      Cartesian3.dot(backward, normal),\n      scratchBackwardProjection\n    );\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n    Cartesian3.normalize(backwardProjection, backwardProjection);\n\n    const doCorner = !CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\n      1.0,\n      CesiumMath.EPSILON7\n    );\n\n    if (doCorner) {\n      cornerDirection = Cartesian3.cross(\n        cornerDirection,\n        normal,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.cross(\n        normal,\n        cornerDirection,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n      const scalar =\n        width /\n        Math.max(\n          0.25,\n          Cartesian3.magnitude(\n            Cartesian3.cross(cornerDirection, backward, scratch1)\n          )\n        );\n      const leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\n        forward,\n        backward,\n        position,\n        ellipsoid\n      );\n      cornerDirection = Cartesian3.multiplyByScalar(\n        cornerDirection,\n        scalar,\n        cornerDirection\n      );\n      if (leftIsOutside) {\n        rightPos = Cartesian3.add(position, cornerDirection, rightPos);\n        center = Cartesian3.add(\n          rightPos,\n          Cartesian3.multiplyByScalar(left, width, center),\n          center\n        );\n        leftPos = Cartesian3.add(\n          rightPos,\n          Cartesian3.multiplyByScalar(left, width * 2, leftPos),\n          leftPos\n        );\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n        scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scaleArray2,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        calculatedPositions = addShiftedPositions(\n          subdividedPositions,\n          left,\n          width,\n          calculatedPositions\n        );\n        if (saveAttributes) {\n          calculatedLefts.push(left.x, left.y, left.z);\n          calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n        startPoint = Cartesian3.clone(leftPos, startPoint);\n        left = Cartesian3.normalize(\n          Cartesian3.cross(normal, forward, left),\n          left\n        );\n        leftPos = Cartesian3.add(\n          rightPos,\n          Cartesian3.multiplyByScalar(left, width * 2, leftPos),\n          leftPos\n        );\n        previousPos = Cartesian3.add(\n          rightPos,\n          Cartesian3.multiplyByScalar(left, width, previousPos),\n          previousPos\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          corners.push({\n            leftPositions: computeRoundCorner(\n              rightPos,\n              startPoint,\n              leftPos,\n              cornerType,\n              leftIsOutside\n            ),\n          });\n        } else {\n          corners.push({\n            leftPositions: computeMiteredCorner(\n              position,\n              Cartesian3.negate(cornerDirection, cornerDirection),\n              leftPos,\n              leftIsOutside\n            ),\n          });\n        }\n      } else {\n        leftPos = Cartesian3.add(position, cornerDirection, leftPos);\n        center = Cartesian3.add(\n          leftPos,\n          Cartesian3.negate(\n            Cartesian3.multiplyByScalar(left, width, center),\n            center\n          ),\n          center\n        );\n        rightPos = Cartesian3.add(\n          leftPos,\n          Cartesian3.negate(\n            Cartesian3.multiplyByScalar(left, width * 2, rightPos),\n            rightPos\n          ),\n          rightPos\n        );\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n        scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scaleArray2,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        calculatedPositions = addShiftedPositions(\n          subdividedPositions,\n          left,\n          width,\n          calculatedPositions\n        );\n        if (saveAttributes) {\n          calculatedLefts.push(left.x, left.y, left.z);\n          calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n        startPoint = Cartesian3.clone(rightPos, startPoint);\n        left = Cartesian3.normalize(\n          Cartesian3.cross(normal, forward, left),\n          left\n        );\n        rightPos = Cartesian3.add(\n          leftPos,\n          Cartesian3.negate(\n            Cartesian3.multiplyByScalar(left, width * 2, rightPos),\n            rightPos\n          ),\n          rightPos\n        );\n        previousPos = Cartesian3.add(\n          leftPos,\n          Cartesian3.negate(\n            Cartesian3.multiplyByScalar(left, width, previousPos),\n            previousPos\n          ),\n          previousPos\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          corners.push({\n            rightPositions: computeRoundCorner(\n              leftPos,\n              startPoint,\n              rightPos,\n              cornerType,\n              leftIsOutside\n            ),\n          });\n        } else {\n          corners.push({\n            rightPositions: computeMiteredCorner(\n              position,\n              cornerDirection,\n              rightPos,\n              leftIsOutside\n            ),\n          });\n        }\n      }\n      backward = Cartesian3.negate(forward, backward);\n    }\n    position = nextPosition;\n  }\n\n  normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n  scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n  scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\n  subdividedPositions = PolylinePipeline.generateArc({\n    positions: scaleArray2,\n    granularity: granularity,\n    ellipsoid: ellipsoid,\n  });\n  calculatedPositions = addShiftedPositions(\n    subdividedPositions,\n    left,\n    width,\n    calculatedPositions\n  );\n  if (saveAttributes) {\n    calculatedLefts.push(left.x, left.y, left.z);\n    calculatedNormals.push(normal.x, normal.y, normal.z);\n  }\n\n  let endPositions;\n  if (cornerType === CornerType.ROUNDED) {\n    endPositions = addEndCaps(calculatedPositions);\n  }\n\n  return {\n    positions: calculatedPositions,\n    corners: corners,\n    lefts: calculatedLefts,\n    normals: calculatedNormals,\n    endPositions: endPositions,\n  };\n};\nexport default CorridorGeometryLibrary;\n"],"names":["Cartesian3","Quaternion","Matrix3","CornerType","CesiumMath","defined","PolylineVolumeGeometryLibrary","PolylinePipeline"],"mappings":"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"}